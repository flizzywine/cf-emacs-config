* init file
#+BEGIN_SRC emacs-lisp
;;face
;; (require 'spacemacs-theme)

;;


(exec-path-from-shell-initialize)
(require 'bind-key)
(bind-key* (kbd "M-.") 'jump-to-mark)
(bind-key* (kbd "M-h") 'backward-delete-word)

(require 'helm)


(use-package helm
  :config
  (helm-mode 1)
  (global-set-key (kbd "M-x") 'helm-smex)
  (global-set-key (kbd "M-r") 'helm-recentf)
  (global-set-key (kbd "M-,") 'helm-buffers-list)
  (global-set-key (kbd "H-C-o") 'helm-buffers-list)
  (global-set-key (kbd "H-<return>") 'ace-jump-helm-line)
  (setq helm-ff-init  1)
  ;;helm-swoop
  )



(use-package ace-jump-mode
  :config
  (global-set-key (kbd "C-j") 'ace-jump-word-mode)
  (global-set-key (kbd "M-j") 'ace-jump-line-mode))

(use-package helm-fuzzier
  :config
  (helm-fuzzier-mode 1))

(use-package helm-swoop
  :config
  (global-set-key (kbd "H-F") 'helm-multi-swoop-current-mode)
  (setq helm-multi-swoop-edit-save t)
  (setq helm-swoop-move-to-line-cycle t)) 

;; (use-package flymake
;;   :config
;;   (add-hook 'java-mode-hook 'flymake-mode-on))


(global-set-key (kbd "<tab>") 'indent-for-tab-command)


(use-package helm-gtags
  :config
  (global-set-key (kbd "C-.") 'helm-gtags-dwim))

(use-package yasnippet
  :config
  (yas-reload-all)
  (yas-global-mode 1)
  (global-set-key (kbd "C-<tab>") 'yas-expand))

(add-hook 'after-init-hook 'global-company-mode)
(add-hook 'after-init-hook 'company-statistics-mode)
(use-package company
  :config
  ;; (define-key c++-mode-map (kbd "C-<tab>") 'company-complete)
  ;; (add-to-list 'company-backends 'company-jedi)
  ;; (add-to-list 'company-backends 'company-dabbrev)
  (setq company-minimum-prefix-length 2)
  (setq company-idle-delay 0)
  (setq company-dabbrev-downcase nil))



(use-package flycheck
  :ensure t
  :init
  (global-flycheck-mode)
  ;; (add-hook 'flycheck-mode-hook #'flycheck-irony-setup)
  :config
  (flycheck-pos-tip-mode t))

(use-package flycheck-clang-analyzer
  :ensure t
  :after flycheck
  :config (flycheck-clang-analyzer-setup)
  (setq flycheck-clang-analyzer-executable "/usr/bin/clang")
  )


(use-package magit
  :config
  (global-set-key (kbd "M-g") 'magit-status))

(use-package crux
  :config
  (global-set-key (kbd "H-9") 'crux-swap-windows)
  (global-set-key (kbd "H-K") 'crux-kill-other-buffers)
  (global-set-key (kbd "C-l") 'crux-kill-whole-line)
  (global-set-key (kbd "M-r") 'crux-recentf-find-file)
  (defun open-init-file ()
	(interactive)
	(find-file user-init-file))
  (global-set-key (kbd "<f2>") 'open-init-file)
  ;; (global-set-key (kbd "<f2>") 'crux-find-user-init-file)

  (global-set-key (kbd "M-k") 'crux-kill-line-backwards)
  
  (global-set-key (kbd "C-o") 'crux-smart-open-line)
  (global-set-key (kbd "C-S-o") 'crux-smart-open-line-above)
  (global-set-key (kbd "C-c n") 'crux-cleanup-buffer-or-region)
  (global-set-key (kbd "C-,") 'crux-switch-to-previous-buffer)
  (global-set-key (kbd "M-k") 'crux-kill-line-backwards)
  (global-set-key (kbd "C-l") 'crux-kill-whole-line)
 )


(use-package osx-lib
  :config
  (global-set-key (kbd "H-I") 'osx-lib-reveal-in-finder)
  ;; (global-set-key (kbd "H-i") 'osx-lib-start-terminal)
  ;; (global-set-key (kbd "H-c") 'osx-lib-copy-to-clipboard)
  ;; (global-set-key (kbd "H-v") 'osx-lib-paste-from-clipboard)
  )


(defun my-delete-backward-to-ws ()
  (interactive)
  (delete-region (point) (save-excursion (skip-syntax-backward "^ ") (point))))

(defun xah-paste-or-paste-previous ()
  "Paste. When called repeatedly, paste previous.
This command calls `yank', and if repeated, call `yank-pop'.

When `universal-argument' is called first with a number arg, paste that many times.

URL `http://ergoemacs.org/emacs/emacs_paste_or_paste_previous.html'
Version 2017-07-25"
  (interactive)
  (progn
	(when (and delete-selection-mode (region-active-p))
	  (delete-region (region-beginning) (region-end)))
	(if current-prefix-arg
		(progn
		  (dotimes ($i (prefix-numeric-value current-prefix-arg))
			(yank)))
	  (if (eq real-last-command this-command)
		  (yank-pop 1)
		(yank)))))
(global-set-key (kbd "C-y") 'xah-paste-or-paste-previous)

(add-hook 'c-mode-hook
		  (lambda ()(modify-syntax-entry ?_ "w")))

;; (use-package projectile
;;   :config
;;   (projectile-mode 1)
;;   (global-set-key (kbd "M-,") 'projectile-find-other-file)
;;   (global-set-key (kbd "C-'") 'projectile-find-file-dwim)
;;   (setq projectile-enable-caching t)
;;   )

(use-package real-auto-save
  :config
  (add-hook 'prog-mode-hook 'real-auto-save-mode)
  (setq real-auto-save-interval 30)) ;; in seconds

(use-package evil
  :config
  (evil-mode 1)
  (setq evil-default-state 'emacs)
  (define-key evil-emacs-state-map (kbd "C-z") 'evil-execute-in-normal-state)
  (define-key evil-emacs-state-map (kbd "H-z") 'evil-normal-state)
  (define-key evil-normal-state-map (kbd "M-z") 'evil-change-to-initial-state)
)

;; (use-package ace-jump-mode
;;   :config
;;   (global-set-key (kbd "C-j") 'ace-jump-char-mode)
;;   (global-set-key (kbd "M-j") 'ace-jump-word-mode)
;;   )

;; (use-package evil-surround
;;   :ensure t
;;   :config
;;   (global-evil-surround-mode 1))

(defun rename-file-and-buffer (new-name)
  "Renames both current buffer and file it's visiting to NEW-NAME."
  (interactive "sNew name: ")
  (let ((name (buffer-name))
		(filename (buffer-file-name)))
	(if (not filename)
		(message "Buffer '%s' is not visiting a file!" name)
	  (if (get-buffer new-name)
		  (message "A buffer named '%s' already exists!" new-name)
		(progn
		  (rename-file filename new-name 1)
		  (rename-buffer new-name)
		  (set-visited-file-name new-name)
		  (set-buffer-modified-p nil))))))

** basic config
*** setqs 
 #+BEGIN_SRC emacs-lisp
 (setq
  inhibit-startup-screen t
  create-lockfiles nil
  make-backup-files nil
  inhibit-splash-screen t
  ring-bell-function 'ignore
  auto-save-default nil
  make-backup-file nil

  scroll-error-top-bottom t
  show-paren-delay 0.5
  use-package-always-ensure t
  sentence-end-double-space nil)


 (tool-bar-mode -1)
 (global-linum-mode t)
 (global-hl-line-mode t)
 (column-number-mode 1)
 (electric-indent-mode nil)

 (delete-selection-mode 1)
 (global-superword-mode 1)
 (electric-pair-mode 1)
 ;; buffer local variables
 (setq-default
  indent-tabs-mode nil
  tab-width 4
  c-basic-offset 4)

 (defun toggle-fullscreen ()
   "Toggle full screen"
   (interactive)
   (set-frame-parameter
      nil 'fullscreen
      (when (not (frame-parameter nil 'fullscreen)) 'fullboth)))




 (fset 'yes-or-no-p 'y-or-n-p)


 ;
 (setq-default cursor-type 'bar)
 (show-paren-mode t)
 (setq tab-always-indent 'complete)

 (global-auto-revert-mode t)


 (setq hippie-expand-try-functions-list '(try-expand-dabbrev
                                          try-expand-dabbrev-all-buffers
                                          try-expand-dabbrev-from-kill
                                          try-complete-file-name-partially
                                          try-complete-file-name
                                          try-expand-all-abbrevs
                                          try-expand-list
                                          try-expand-line
                                          try-complete-lisp-symbol-partially
                                          try-complete-lisp-symbol))

 #+END_SRC



*** face 
 #+BEGIN_SRC emacs-lisp
 (require 'doom-themes)

   ;; Global settings (defaults)
 (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
       doom-themes-enable-italic t) ; if nil, italics is universally disabl
 (load-theme 'doom-one t)

 (use-package doom-modeline
   :ensure t
   :hook (after-init . doom-modeline-mode))


 (set-frame-font "-*-Monaco-normal-normal-normal-*-15-*-*-*-m-0-iso10646-1")
 (set-default-font "-*-Monaco-normal-normal-normal-*-15-*-*-*-m-0-iso10646-1")
 (set-frame-font "Monaco")
 (set-frame-font "monaco")

 (setq initial-frame-alist '((fullscreen . maximized)))
 (set-face-attribute 'default nil :height 150)
 #+END_SRC

*** keybinds 
 #+BEGIN_SRC emacs-lisp

 (require 'bind-key)

 (use-package crux
   :config
   (global-set-key (kbd "H-9") 'crux-swap-windows)
   (global-set-key (kbd "H-K") 'crux-kill-other-buffers)
   (global-set-key (kbd "C-l") 'crux-kill-whole-line)
   (global-set-key (kbd "M-r") 'crux-recentf-find-file)
   (defun open-init-file ()
	 (interactive)
	 (find-file user-init-file))
   (global-set-key (kbd "<f2>") 'open-init-file)
   ;; (global-set-key (kbd "<f2>") 'crux-find-user-init-file)

   (global-set-key (kbd "M-k") 'crux-kill-line-backwards)
  
   (global-set-key (kbd "C-o") 'crux-smart-open-line)
   (global-set-key (kbd "C-S-o") 'crux-smart-open-line-above)
   (global-set-key (kbd "C-c n") 'crux-cleanup-buffer-or-region)
   (global-set-key (kbd "C-,") 'crux-switch-to-previous-buffer)
   (global-set-key (kbd "M-k") 'crux-kill-line-backwards)
   (global-set-key (kbd "C-l") 'crux-kill-whole-line)
  )


 (use-package osx-lib
   :config
   (global-set-key (kbd "H-I") 'osx-lib-reveal-in-finder)
   ;; (global-set-key (kbd "H-i") 'osx-lib-start-terminal)
   ;; (global-set-key (kbd "H-c") 'osx-lib-copy-to-clipboard)
   ;; (global-set-key (kbd "H-v") 'osx-lib-paste-from-clipboard)
   )

 (bind-key* (kbd "M-.") 'jump-to-mark)
 (bind-key* (kbd "M-h") 'backward-delete-word)
 (global-set-key (kbd "<tab>") 'indent-for-tab-command)
 (setq mac-command-modifier 'hyper)
 (setq mac-option-modifier 'meta)

 (global-set-key (kbd "<backspace>") 'kill-region)

 (global-set-key (kbd "<tab>") 'indent-for-tab-command)

 (global-set-key [(hyper x)] 'kill-region)

 (global-set-key [(hyper q)] 'save-buffers-kill-terminal)
 (global-set-key [(hyper a)] 'mark-whole-buffer)
 (global-set-key [(hyper v)] 'clipboard-yank)
 (global-set-key [(hyper c)] 'kill-ring-save)
 (global-set-key [(hyper s)] 'save-buffer)
 (global-set-key [(hyper l)] 'copy-line)
 (global-set-key [(hyper z)] 'undo)
 (global-set-key [(hyper e)] 'eval-last-sexp)
 (global-set-key (kbd "H-o") 'helm-find-files)
 (global-set-key (kbd "<space>-o") 'helm-find-files)   

 (global-set-key (kbd "H-p") 'package-list-packages)
 (global-set-key (kbd "H-i") 'iterm-goto-filedir-or-home)

 (global-set-key (kbd "H-f") 'helm-occur)
 (global-set-key (kbd "H-F") 'helm-multi-swoop-projectile)

 (defun save-and-kill-this-buffer ()
   (interactive)
   (save-current-buffer)
   (kill-this-buffer))
 (global-set-key (kbd "H-C-k") 'kill-all-other-buffers)



 (global-set-key (kbd "C-h") 'backward-delete-char)
 (global-set-key (kbd "C-a") 'my-move-beginning-of-line-before-whitespace)
 (global-set-key (kbd "C-e") 'my-move-end-of-line-before-whitespace)
 (global-set-key (kbd "C-L") 'kill-whole-line)
 (global-set-key (kbd "C-;") 'comment-line)
 (global-set-key (kbd "C-!") 'shell-command)

 ;; (global-set-key (kbd "C-o") 'my-newline-forward)
 ;; (global-set-key (kbd "C-S-O") 'my-newline-backward)

 (global-set-key (kbd "C-M-SPC") 'set-mark-command)

 (global-set-key (kbd "C-x e") 'call-last-kbd-macro)

 (global-set-key (kbd "C-M-p") 'move-line-region-up)
 (global-set-key (kbd "C-M-n") 'move-line-region-down)


 (global-set-key (kbd "H-1") 'delete-other-windows)
 (global-set-key (kbd "H-2") 'split-window-below)
 (global-set-key (kbd "H-3") 'split-window-right)
 (global-set-key (kbd "H-`") 'delete-window)

 (global-set-key (kbd "H-<down>") 'windmove-down)
 (global-set-key (kbd "H-<up>") 'windmove-up)
 (global-set-key (kbd "H-<left>") 'windmove-left)
 (global-set-key (kbd "H-<right>") 'windmove-right)

 (global-set-key (kbd "H-M-g") 'goto-line)



 (global-set-key (kbd "M-h") 'backward-kill-word)

 (global-set-key (kbd "M-w") 'my-kill-word-at-point)

 (global-set-key (kbd "H-=") 'text-scale-increase)
 (global-set-key (kbd "H--") 'text-scale-decrease)
 (global-set-key (kbd "<f11>") 'toggle-fullscreen)

 (global-set-key (kbd "C-<backspace>") (lambda ()
										 (interactive)
										 (kill-line 0)
										 (indent-according-to-mode)))



 (global-set-key (kbd "H-E") 'eval-buffer)
 (global-set-key (kbd "C-q") 'query-replace-regexp)
 (global-set-key (kbd "M-h") 'delete-word)


 (global-set-key (kbd "C-r") 'replace-symbol-in-buffer)

 (global-set-key (kbd "H-l") 'crux-duplicate-current-line-or-region)
 ;; (global-set-key (kbd "M-l") 'avy-move-line)

 ;; TERMINAL MAPPINGS TO SUPPORT ITERM2 FOR MAC
	  (progn
	  (let ((map (if (boundp 'input-decode-map)
				  input-decode-map
	  function-key-map)))
	  (define-key map "\e[1;P9"  (kbd "H-a"))
	  (define-key map "\e[1;P10" (kbd "H-b"))
	  (define-key map "\e[1;P11" (kbd "H-c"))
	  (define-key map "\e[1;P12" (kbd "H-d"))
	  (define-key map "\e[1;P13" (kbd "H-e"))
	  (define-key map "\e[1;P14" (kbd "H-f"))
	  (define-key map "\e[1;P15" (kbd "H-g"))
	  (define-key map "\e[1;P16" (kbd "H-h"))
	  (define-key map "\e[1;P17" (kbd "H-i"))
	  (define-key map "\e[1;P18" (kbd "H-j"))
	  (define-key map "\e[1;P19" (kbd "H-k"))
	  (define-key map "\e[1;P20" (kbd "H-l"))
	  (define-key map "\e[1;P21" (kbd "H-m"))
	  (define-key map "\e[1;P22" (kbd "H-n"))
	  (define-key map "\e[1;P23" (kbd "H-o"))
	  (define-key map "\e[1;P24" (kbd "H-p"))
	  (define-key map "\e[1;P25" (kbd "H-q"))
	  (define-key map "\e[1;P26" (kbd "H-r"))
	  (define-key map "\e[1;P27" (kbd "H-s"))
	  (define-key map "\e[1;P28" (kbd "H-t"))
	  (define-key map "\e[1;P29" (kbd "H-u"))
	  (define-key map "\e[1;P30" (kbd "H-v"))
	  (define-key map "\e[1;P31" (kbd "H-w"))
	  (define-key map "\e[1;P32" (kbd "H-x"))
	  (define-key map "\e[1;P33" (kbd "H-y"))
	  (define-key map "\e[1;P34" (kbd "H-z"))
	  (define-key map "\e[1;P35" (kbd "H-0"))
	  (define-key map "\e[1;P36" (kbd "H-1"))
	  (define-key map "\e[1;P37" (kbd "H-2"))
	  (define-key map "\e[1;P38" (kbd "H-3"))
	  (define-key map "\e[1;P39" (kbd "H-4"))
	  (define-key map "\e[1;P40" (kbd "H-5"))
	  (define-key map "\e[1;P41" (kbd "H-6"))
	  (define-key map "\e[1;P42" (kbd "H-7"))
	  (define-key map "\e[1;P43" (kbd "H-8"))
	  (define-key map "\e[1;P44" (kbd "H-9"))
	  (define-key map "\e[1;P45" (kbd "H-<f1>"))
	  (define-key map "\e[1;P46" (kbd "H-<f2>"))
	  (define-key map "\e[1;P47" (kbd "H-<f3>"))
	  (define-key map "\e[1;P48" (kbd "H-<f4>"))
	  (define-key map "\e[1;P49" (kbd "H-<f5>"))
	  (define-key map "\e[1;P50" (kbd "H-<f6>"))
	  (define-key map "\e[1;P51" (kbd "H-<f7>"))
	  (define-key map "\e[1;P53" (kbd "H-<f9>"))
	  (define-key map "\e[1;P52" (kbd "H-<f8>"))
	  (define-key map "\e[1;P54" (kbd "H-<f10>"))
	  (define-key map "\e[1;P55" (kbd "H-<f11>"))
	  (define-key map "\e[1;P56" (kbd "H-<f12>"))
	  ))


 (define-key global-map (kbd "RET") 'newline-and-indent)
 (define-key global-map (kbd "H-M-g") 'goto-line)

 (global-set-key (kbd "H-[") 'switch-to-prev-buffer)
 (global-set-key (kbd "H-]") 'switch-to-next-buffer)
 (global-set-key (kbd "H-k") 'save-and-kill-this-buffer)
 ;;
 (global-set-key (kbd "M-h") 'backward-delete-word)
 (global-set-key (kbd "H-O") 'xah-open-in-desktop)
 (global-set-key (kbd "M-c") 'upcase-char)

 (global-set-key (kbd "M-H-l") 'select-current-line)


 #+END_SRC
*** defuns 
 #+BEGIN_SRC emacs-lisp
(defun xah-open-in-external-app ()
  (interactive)
  (let* (
         ($file-list
          (if (string-equal major-mode "dired-mode")
              (dired-get-marked-files)
            (list (buffer-file-name))))
         ($do-it-p (if (<= (length $file-list) 5)
                       t
                     (y-or-n-p "Open more than 5 files? "))))
    (when $do-it-p
      (cond
       ((string-equal system-type "windows-nt")
        (mapc
         (lambda ($fpath)
           (w32-shell-execute "open" (replace-regexp-in-string "/" "\\" $fpath t t))) $file-list))
       ((string-equal system-type "darwin")
        (mapc
         (lambda ($fpath)
           (shell-command
            (concat "open " (shell-quote-argument $fpath))))  $file-list))
       ((string-equal system-type "gnu/linux")
        (mapc
         (lambda ($fpath) (let ((process-connection-type nil))
                            (start-process "" nil "xdg-open" $fpath))) $file-list))))))

(defun xah-open-in-desktop ()
  (interactive)
  (cond
   ((string-equal system-type "windows-nt")
    (w32-shell-execute "explore" (replace-regexp-in-string "/" "\\" default-directory t t)))
   ((string-equal system-type "darwin") (shell-command "open ."))
   ((string-equal system-type "gnu/linux")
    (let (
          (process-connection-type nil)
          (openFileProgram (if (file-exists-p "/usr/bin/gvfs-open")
                               "/usr/bin/gvfs-open"
                             "/usr/bin/xdg-open")))
      (start-process "" nil openFileProgram "."))
    ;; (shell-command "xdg-open .") ;; 2013-02-10 this sometimes froze emacs till the folder is closed. For example: with nautilus
    )))
(defun my-newline-forward  ()
  "newline."
  (interactive)
  (let ((oldpos (point)))
    (end-of-line)
    (newline-and-indent)))

(defun open-recent-file-and-search ()
  (interactive)
  (recentf-open-files)
  (isearch-forward))

(defun my-newline-backward  ()
  "newline."
  (interactive)
  (let ((oldpos (point)))
    (beginning-of-line)
    (newline-and-indent))
  (previous-line))

(defun push-mark-no-activate ()
  "Pushes `point' to `mark-ring' and does not activate the region
   Equivalent to \\[set-mark-command] when \\[transient-mark-mode] is disabled"
  (interactive)
  (push-mark (point) t nil)
  (message "Pushed mark to ring"))

(defun jump-to-mark ()
  "Jumps to the local mark, respecting the `mark-ring' order.
  This is the same as using \\[set-mark-command] with the prefix argument."
  (interactive)
  (set-mark-command 1))
(global-set-key (kbd "M-.") 'jump-to-mark)

(defun switch-to-previous-buffer ()
  "Switch to most recent buffer. Repeated calls toggle back and forth between the most recent two buffers."
  (interactive)
  (switch-to-buffer (other-buffer (current-buffer) 1)))



(defun get-point (symbol &optional arg)
  "get the point"
  (funcall symbol arg)
  (point)
  )

(defun copy-thing (begin-of-thing end-of-thing &optional arg)
  "copy thing between beg & end into kill ring"
  (save-excursion
    (let ((beg (get-point begin-of-thing 1))
          (end (get-point end-of-thing arg)))
      (copy-region-as-kill beg end)))
  )

(defun paste-to-mark(&optional arg)
  "Paste things to mark, or to the prompt in shell-mode"
  (let ((pasteMe 
     	 (lambda()
     	   (if (string= "shell-mode" major-mode)
               (progn (comint-next-prompt 25535) (yank))
             (progn (goto-char (mark)) (yank) )))))
    (if arg
        (if (= arg 1)
     		nil
          (funcall pasteMe))
      (funcall pasteMe))
    ))
(defun copy-line (&optional arg)
  "Save current line into Kill-Ring without mark the line "
  (interactive "P")
  (copy-thing 'beginning-of-line 'end-of-line arg)
  (paste-to-mark arg)
  )
(defun move-text-internal (arg)
  (cond
   ((and mark-active transient-mark-mode)
    (if (> (point) (mark))
        (exchange-point-and-mark))
    (let ((column (current-column))
          (text (delete-and-extract-region (point) (mark))))
      (forward-line arg)
      (move-to-column column t)
      (set-mark (point))
      (insert text)
      (exchange-point-and-mark)
      (setq deactivate-mark nil)))
   (t
    (beginning-of-line)
    (when (or (> arg 0) (not (bobp)))
      (forward-line)
      (when (or (< arg 0) (not (eobp)))
        (transpose-lines arg))
      (forward-line -1)))))

(defun move-line (n)
  "Move the current line up or down by N lines."
  (interactive "p")
  (setq col (current-column))
  (beginning-of-line) (setq start (point))
  (end-of-line) (forward-char) (setq end (point))
  (let ((line-text (delete-and-extract-region start end)))
    (forward-line n)
    (insert line-text)
    ;; restore point to original column in moved line
    (forward-line -1)
    (forward-char col)))

(defun move-line-up (n)
  "Move the current line up by N lines."
  (interactive "p")
  (move-line (if (null n) -1 (- n))))

(defun move-line-down (n)
  "Move the current line down by N lines."
  (interactive "p")
  (move-line (if (null n) 1 n)))

(defun move-region (start end n)
  "Move the current region up or down by N lines."
  (interactive "r\np")
  (let ((line-text (delete-and-extract-region start end)))
    (forward-line n)
    (let ((start (point)))
      (insert line-text)
      (setq deactivate-mark nil)
      (set-mark start))))

(defun move-region-up (start end n)
  "Move the current line up by N lines."
  (interactive "r\np")
  (move-region start end (if (null n) -1 (- n))))

(defun move-region-down (start end n)
  "Move the current line down by N lines."
  (interactive "r\np")
  (move-region start end (if (null n) 1 n)))

(defun move-line-region-up (&optional start end n)
  (interactive "r\np")
  (if (use-region-p) (move-region-up start end n) (move-line-up n)))

(defun move-line-region-down (&optional start end n)
  (interactive "r\np")
  (if (use-region-p) (move-region-down start end n) (move-line-down n)))


(defun my-move-end-of-line-before-whitespace ()
  "Move to the last non-whitespace character in the current line."
  (interactive)
  (move-end-of-line nil)
  (re-search-backward "^\\|[^[:space:]]")
  (forward-char))

(defun my-move-beginning-of-line-before-whitespace ()
  "Move point to first non-whitespace character or beginning-of-line.

Move point to the first non-whitespace character on this line.
If point was already at that position, move point to beginning of line."
  (interactive)
  (let ((oldpos (point)))
    (back-to-indentation)
    (and (= oldpos (point))
         (beginning-of-line))))

(defun isearch-at-point-set-mark ()
  (interactive)
  (push-mark-no-activate)
  (isearch-forward-symbol-at-point))
(global-set-key (kbd "C-H-f") 'isearch-at-point-set-mark)


(defun isearch-forward-set-mark ()
  (interactive)
  (push-mark)
  (isearch-forward))


(defun transpose-buffers (arg)
  "Transpose the buffers shown in two windows."
  (interactive "p")
  (let ((selector (if (>= arg 0) 'next-window 'previous-window)))
    (while (/= arg 0)
      (let ((this-win (window-buffer))
            (next-win (window-buffer (funcall selector))))
        (set-window-buffer (selected-window) next-win)
        (set-window-buffer (funcall selector) this-win)
        (select-window (funcall selector)))
      (setq arg (if (plusp arg) (1- arg) (1+ arg))))))

(defun my-kill-thing-at-point (thing)
  "Kill the `thing-at-point' for the specified kind of THING."
  (let ((bounds (bounds-of-thing-at-point thing)))
    (if bounds
        (kill-region (car bounds) (cdr bounds))
      (error "No %s at point" thing))))

(defun my-kill-word-at-point ()
  "Kill the word at point."
  (interactive)
  (my-kill-thing-at-point 'word))

(defun kill-other-buffers ()
  "Kill all other buffers."
  (interactive)
  (mapc 'kill-buffer 
        (delq (current-buffer) 
              (remove-if-not 'buffer-file-name (buffer-list)))))

  (defun iedit-dwim (arg)
    "Starts iedit but uses \\[narrow-to-defun] to limit its scope."
    (interactive "P")
    (if arg
    (iedit-mode)
      (save-excursion
        (save-restriction
          (widen)
          ;; this function determines the scope of `iedit-start'.
          (if iedit-mode
              (iedit-done)
            ;; `current-word' can of course be replaced by other
            ;; functions.
            (narrow-to-defun)
            (iedit-start (current-word) (point-min) (point-max)))))))


(defadvice kill-region (before unix-werase activate compile)
      "When called interactively with no active region, delete a single word
    backwards instead."
      (interactive
       (if mark-active (list (region-beginning) (region-end))
         (list (save-excursion (backward-char 1) (point)) (point)))))

(defun helm-swoop-set-mark ()
  (interactive)
  (push-mark-no-activate)
  (helm-swoop))

(defun switch-to-other-buffer (arg)
  "Switch to the previous buffer.  With a numeric arg, n, switch to the nth
most recent buffer.  With an arg of 0, buries the current buffer at the
bottom of the buffer stack."
  (interactive "p")
  (if (eq arg 0)
      (bury-buffer (current-buffer)))
  (switch-to-buffer
   (if (<= arg 1) (other-buffer (current-buffer))
     (nth (1+ arg) (buffer-list)))))


(if (not (fboundp 'next-buffer))
    (defun next-buffer ()
  "Switch to the next buffer in cyclic order."
  (interactive)
  (switch-to-other-buffer 0)))

(if (not (fboundp 'previous-buffer))
     (defun previous-buffer ()
  "Switch to the previous buffer in cyclic order."
  (interactive)
  (while (string-match "\\` "
                       (buffer-name (switch-to-other-buffer
                                     (- (length (buffer-list)) 2)))))))
>>>>>>> master

(defun delete-word (arg)
  "Delete characters forward until encountering the end of a word.
With argument, do this that many times."
  (interactive "p")
  (if (use-region-p)
<<<<<<< HEAD
	  (delete-region (region-beginning) (region-end))
	(delete-region (point) (progn (forward-word arg) (point)))))

(defun backward-delete-word (arg)
  "Delete characters backward until encountering the end of a word.
With argument, do this that many times."
  (interactive "p")
  (delete-word (- arg)))





(defun recompile-quietly ()
  "Re-compile without changing the window configuration."
  (interactive)
  (save-window-excursion
	(recompile)))


(use-package avy
  :config
  (global-set-key (kbd "M-l") 'avy-copy-line)
  (global-set-key (kbd "C-M-l") 'avy-move-line)
  )



;; (use-package flymake-python-pyflakes
;;   :config
;;   (setq flymake-python-pyflakes-executable "flake8")
;;   (setq flymake-python-pyflakes-extra-arguments '("--ignore=W806"))
;;   (add-hook 'python-mode-hook 'flymake-python-pyflakes-load)
;;   )
                  
(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(company-backends
   (quote
	((company-dabbrev company-clang company-semantic company-keywords company-capf)
	 company-capf company-bbdb company-nxml company-css company-cmake company-files
	 (company-gtags company-etags)
	 company-oddmuse)))
 '(custom-safe-themes
   (quote
	("3c83b3676d796422704082049fc38b6966bcad960f896669dfc21a7a37a748fa" default)))
 '(elpy-syntax-check-command "/usr/local/bin/flake8")
 '(flymake-gui-warnings-enabled nil)
 '(gofmt-show-errors (quote buffer))
 '(indent-tabs-mode t)
 '(jdee-jdk-registry
   (quote
	(("1.8" . "/Library/Java/JavaVirtualMachines/jdk1.8.0_121.jdk/Contents/Home"))))
 '(jdee-server-dir "/Users/chenfeng/.emacs.d/jdee-server")
 '(menu-bar-mode nil)
 '(ns-auto-hide-menu-bar nil)
 '(org-babel-load-languages (quote ((emacs-lisp . t) (python . t))))
 '(org-dotemacs-default-file "~/.emacs.d/init.org")
 '(org-export-use-babel nil)
 '(package-selected-packages
   (quote
	(ob-go ob-swift ob-ipython jupyter helm-dired-recent-dirs dired-recent org-download org-mode flycheck-irony flycheck-clang-analyzer company-lsp lsp-ui dap-mode lsp-mode realgud-ipdb realgud-jdb realgud-lldb ivy counsel-etags helm-etags-plus ox-pandoc projectile-speedbar cnfonts ipython-shell-send live-py-mode doom-themes doom-modeline simpleclip markdown-toc js-comint osx-browse zencoding-mode company-web-html company-web-jade company-web vue-mode swift3-mode helm-swoop helm-fuzzier ace-jump-helm-line helm avy ace-isearch evil-leader auctex markdown-mode+ markdown-preview-eww dash-at-point ein helm-pydoc pydoc pydoc-info flymake javadoc-lookup w3m xwidgete ace-jump-mode realgud nyan-mode elpy pylint web-mode use-package swiper-helm spacemacs-theme spacemacs-common smartparens smart-mode-line shift-text request-deferred replace-symbol real-auto-save paredit-everywhere osx-lib markdown-mode magit js2-mode irony ioccur helm-smex helm-projectile helm-gtags helm-c-yasnippet helm-c-moccur helm-ag go-mode ggtags function-args flycheck-pos-tip flx-isearch flx-ido find-file-in-project f evil-surround crux company-statistics company-c-headers bash-completion anaphora ace-window)))
 '(python-indent-offset 2)
 '(safe-local-variable-values (quote ((mangle-whitespace . t))))
 '(tab-always-indent t)
 '(tab-width 4))
 
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(flymake-warning ((t nil))))




;; java kdbs
(define-key java-mode-map (kbd "H-r") 'iterm-java)
(define-key java-mode-map (kbd "C-c r") 'run-java-Main)

;; find and search and replace
;; (global-set-key (kbd "M-j") 'evil-find-char)
(global-set-key (kbd "C-s") 'swiper)

;;jupyter
;; (use-package ein
;;   :config
;;   (add-hook ein:notebook-multilang-mode-hook )

;; (use-package ein
;;   :config
;; (define-key ein:notebook-multilang-mode-map (kbd "<C-return>") 'ein:worksheet-execute-cell)
;; (define-key  ein:notebook-multilang-mode-map (kbd "H-s") 'ein:notebook-save-notebook-command))

;; (use-package nodejs-repl
;;   :config
;;   (add-hook 'js2-mode-hook
;;             (lambda ()
;;               (define-key js2-mode-map (kbd "H-e") 'nodejs-repl-send-last-expression)
;;               (define-key js2-mode-map (kbd "C-c C-r") 'nodejs-repl-send-region)
;;               (define-key js2-mode-map (kbd "C-c C-l") 'nodejs-repl-load-file)
;;               (define-key js2-mode-map (kbd "C-c C-z") 'nodejs-repl-switch-to-repl))))

(use-package js-comint
  :config
  (add-hook 'js2-mode-hook
            (lambda ()
			  (define-key js2-mode-map (kbd "H-e") 'js-send-last-sexp)
			  (define-key js2-mode-map (kbd "H-E") 'js-send-region)
			  (define-key js2-mode-map (kbd "H-r") 'js-send-buffer)
  )))

(global-set-key (kbd "H-d") 'dired)


(use-package ivy
  :config
  (global-set-key (kbd "C-t") 'counsel-etags-grep))


;; (use-package company-lsp
;;     :config
;;     ;; 设置 company-lsp 为后端
;;     (push 'company-lsp company-backends))


;; (use-package lsp-ui
;;     :init
;;     ;; 启用 lsp-ui
;;     (add-hook 'lsp-mode-hook 'lsp-ui-mode)
;;     ;; 启用 flycheck
;;     (add-hook 'python-mode-hook 'flycheck-mode))


;; (lsp-register-client
;;  (make-lsp-client :new-connection (lsp-stdio-connection "pyls")
;;                   :major-modes '(python-mode)
;;                   :server-id 'pyls))


(use-package org
  :config
  (require 'ob-ipython)
  (require 'ob-go)
  (auto-image-file-mode 1)
  (defun insert-current-time () 
    "Insert the current time" 
    (interactive "*") 
    (insert (current-time-string)))
  (global-set-key (kbd "C-c i") 'insert-current-time)
  (require 'org-download)
  (setq org-startup-with-inline-images t)
  ;; (org-display-inline-image)
  (define-key org-mode-map   (kbd "C-,") 'crux-switch-to-previous-buffer)
  ;; (setq python-shell-interpreter "python")
  (org-babel-do-load-languages
 'org-babel-load-languages
 '((emacs-lisp . t)
   ;; (julia . t)
   (go . t)
   (python . t)
   (ipython . t)
   ;; (jupyter . t)))
   ))

  (setq org-confirm-babel-evaluate nil)   ;don't prompt me to confirm everytime I want to evaluate a block

;;; display/update images in the buffer after I evaluate
(add-hook 'org-babel-after-execute-hook 'org-display-inline-images 'append)
  )
 
 #+END_SRC
=======
      (delete-region (region-beginning) (region-end))
    (delete-region (point) (progn (forward-word arg) (point)))))



(defun xah-insert-bracket-pair (@left-bracket @right-bracket &optional @wrap-method)
  (if (use-region-p)
      (progn ; there's active region
        (let (
              ($p1 (region-beginning))
              ($p2 (region-end)))
          (goto-char $p2)
          (insert @right-bracket)
          (goto-char $p1)
          (insert @left-bracket)
          (goto-char (+ $p2 2))))
    (progn ; no text selection
      (let ($p1 $p2)
        (cond
         ((eq @wrap-method 'line)
          (setq $p1 (line-beginning-position) $p2 (line-end-position))
          (goto-char $p2)
          (insert @right-bracket)
          (goto-char $p1)
          (insert @left-bracket)
          (goto-char (+ $p2 (length @left-bracket))))
         ((eq @wrap-method 'block)
          (save-excursion
            (progn
              (if (re-search-backward "\n[ \t]*\n" nil 'move)
                  (progn (re-search-forward "\n[ \t]*\n")
                         (setq $p1 (point)))
                (setq $p1 (point)))
              (if (re-search-forward "\n[ \t]*\n" nil 'move)
                  (progn (re-search-backward "\n[ \t]*\n")
                         (setq $p2 (point)))
                (setq $p2 (point))))
            (goto-char $p2)
            (insert @right-bracket)
            (goto-char $p1)
            (insert @left-bracket)
            (goto-char (+ $p2 (length @left-bracket)))))
         ( ;  do line. line must contain space
          (and
           (eq (point) (line-beginning-position))
           ;; (string-match " " (buffer-substring-no-properties (line-beginning-position) (line-end-position)))
           (not (eq (line-beginning-position) (line-end-position))))
          (insert @left-bracket )
          (end-of-line)
          (insert  @right-bracket))
         ((and
           (or ; cursor is at end of word or buffer. i.e. xyz▮
            (looking-at "[^-_[:alnum:]]")
            (eq (point) (point-max)))
           (not (or
                 (string-equal major-mode "xah-elisp-mode")
                 (string-equal major-mode "emacs-lisp-mode")
                 (string-equal major-mode "lisp-mode")
                 (string-equal major-mode "lisp-interaction-mode")
                 (string-equal major-mode "common-lisp-mode")
                 (string-equal major-mode "clojure-mode")
                 (string-equal major-mode "xah-clojure-mode")
                 (string-equal major-mode "scheme-mode"))))
          (progn
            (setq $p1 (point) $p2 (point))
            (insert @left-bracket @right-bracket)
            (search-backward @right-bracket )))
         (t (progn
              ;; wrap around “word”. basically, want all alphanumeric, plus hyphen and underscore, but don't want space or punctuations. Also want chinese chars
              ;; 我有一帘幽梦，不知与谁能共。多少秘密在其中，欲诉无人能懂。
              (skip-chars-backward "-_[:alnum:]")
              (setq $p1 (point))
              (skip-chars-forward "-_[:alnum:]")
              (setq $p2 (point))
              (goto-char $p2)
              (insert @right-bracket)
              (goto-char $p1)
              (insert @left-bracket)
              (goto-char (+ $p2 (length @left-bracket))))))))))

 (defun open-init-file ()
   (interactive )
   (find-file "~/.emacs.d/init.el"))

 (defun my-delete-backward-to-ws ()
   (interactive)
   (delete-region (point) (save-excursion (skip-syntax-backward "^ ") (point))))

 (defun xah-paste-or-paste-previous ()
   (interactive)
   (progn
	 (when (and delete-selection-mode (region-active-p))
	   (delete-region (region-beginning) (region-end)))
	 (if current-prefix-arg
		 (progn
		   (dotimes ($i (prefix-numeric-value current-prefix-arg))
			 (yank)))
	   (if (eq real-last-command this-command)
		   (yank-pop 1)
		 (yank)))))
 (global-set-key (kbd "C-y") 'xah-paste-or-paste-previous)

 (add-hook 'c-mode-hook
		   (lambda ()(modify-syntax-entry ?_ "w")))
 (defun rename-file-and-buffer (new-name)
   "Renames both current buffer and file it's visiting to NEW-NAME."
   (interactive "sNew name: ")
   (let ((name (buffer-name))
		 (filename (buffer-file-name)))
	 (if (not filename)
		 (message "Buffer '%s' is not visiting a file!" name)
	   (if (get-buffer new-name)
		   (message "A buffer named '%s' already exists!" new-name)
		 (progn
		   (rename-file filename new-name 1)
		   (rename-buffer new-name)
		   (set-visited-file-name new-name)
		   (set-buffer-modified-p nil))))))

 (defun delete-word (arg)
   "Delete characters forward until encountering the end of a word.
 With argument, do this that many times."
   (interactive "p")
   (if (use-region-p)
	   (delete-region (region-beginning) (region-end))
	 (delete-region (point) (progn (forward-word arg) (point)))))

 (defun backward-delete-word (arg)
   "Delete characters backward until encountering the end of a word.
 With argument, do this that many times."
   (interactive "p")
   (delete-word (- arg)))


 (defun select-current-line ()
   "Select the current line"
   (interactive)
   (end-of-line) ; move to end of line
   (set-mark (line-beginning-position))
   (exchange-point-and-mark)
   )

 #+END_SRC

*** shell
 #+BEGIN_SRC emacs-lisp
 (require 'exec-path-from-shell)
 (exec-path-from-shell-initialize)
 (setq shell-file-name "zsh")
 (setq shell-command-switch "-ic")
 #+END_SRC


** basic package
*** helm
 #+BEGIN_SRC emacs-lisp

 (require 'helm)

 (use-package helm
   :config
   (helm-mode 1)
   (global-set-key (kbd "M-x") 'helm-smex)
   (global-set-key (kbd "M-r") 'helm-recentf)
   (global-set-key (kbd "M-,") 'helm-buffers-list)
   (global-set-key (kbd "H-C-o") 'helm-buffers-list)
   (global-set-key (kbd "H-<return>") 'ace-jump-helm-line)
   (setq helm-ff-init  1)

 (use-package helm-fuzzier
   :config
   (helm-fuzzier-mode 1))

 (use-package helm-swoop
   :config
   (global-set-key (kbd "H-F") 'helm-multi-swoop-current-mode)
   (setq helm-multi-swoop-edit-save t)
   (setq helm-swoop-move-to-line-cycle t)) 

 (use-package helm-gtags
   :config
   (global-set-key (kbd "C-.") 'helm-gtags-dwim))
   )


 #+END_SRC

*** ace-jump
 #+BEGIN_SRC emacs-lisp
 (use-package ace-jump-mode
   :config
   (global-set-key (kbd "C-j") 'ace-jump-word-mode)
   (global-set-key (kbd "M-j") 'ace-jump-line-mode))

 #+END_SRC

*** yasnippet and company
 #+BEGIN_SRC emacs-lisp
 (use-package yasnippet
   :config
   (yas-reload-all)
   (yas-global-mode 1)
   (global-set-key (kbd "C-<tab>") 'yas-expand))

 (add-hook 'after-init-hook 'global-company-mode)
 (add-hook 'after-init-hook 'company-statistics-mode)
 (use-package company
   :config
   ;; (define-key c++-mode-map (kbd "C-<tab>") 'company-complete)
   ;; (add-to-list 'company-backends 'company-jedi)
   ;; (add-to-list 'company-backends 'company-dabbrev)
   (setq company-minimum-prefix-length 2)
   (setq company-idle-delay 0)
   (setq company-dabbrev-downcase nil))
 #+END_SRC

*** flycheck
 #+BEGIN_SRC emacs-lisp
 (use-package flycheck
   :ensure t
   :init
   (global-flycheck-mode)
   ;; (add-hook 'flycheck-mode-hook #'flycheck-irony-setup)
   :config
   (flycheck-pos-tip-mode t))

 (use-package flycheck-clang-analyzer
   :ensure t
   :after flycheck
   :config (flycheck-clang-analyzer-setup)
   (setq flycheck-clang-analyzer-executable "/usr/bin/clang")
   )
 #+END_SRC

*** file management
 #+BEGIN_SRC emacs-lisp
 (use-package real-auto-save
   :config
   (add-hook 'prog-mode-hook 'real-auto-save-mode)
   (setq real-auto-save-interval 30)) ;; in seconds

 (use-package magit
   :config
   (global-set-key (kbd "M-g") 'magit-status))

 #+END_SRC
*** evil
 #+BEGIN_SRC emacs-lisp
 (use-package evil
   :config
   (evil-mode 1)
   (setq evil-default-state 'emacs)
   (define-key evil-emacs-state-map (kbd "C-z") 'evil-execute-in-normal-state)
   (define-key evil-emacs-state-map (kbd "H-z") 'evil-normal-state)
   (define-key evil-normal-state-map (kbd "M-z") 'evil-change-to-initial-state)
 )
 #+END_SRC

*** avy ivy 
 #+BEGIN_SRC emacs-lisp
 (use-package avy
   :config
   (global-set-key (kbd "M-l") 'avy-copy-line)
   (global-set-key (kbd "C-M-l") 'avy-move-line)
   )

 (global-set-key (kbd "C-s") 'swiper)

 (use-package ivy
	:config
	(global-set-key (kbd "C-t") 'counsel-etags-grep))
 #+END_SRC

*** lsp 
 #+BEGIN_SRC emacs-lisp
  ;; (use-package company-lsp
  ;;     :config
  ;;     ;; 设置 company-lsp 为后端
  ;;     (push 'company-lsp company-backends))


  ;; (use-package lsp-ui
  ;;     :init
  ;;     ;; 启用 lsp-ui
  ;;     (add-hook 'lsp-mode-hook 'lsp-ui-mode)
  ;;     ;; 启用 flycheck
  ;;     (add-hook 'python-mode-hook 'flycheck-mode))


  ;; (lsp-register-client
  ;;  (make-lsp-client :new-connection (lsp-stdio-connection "pyls")
  ;;                   :major-modes '(python-mode)
  ;;                   :server-id 'pyls))
 #+END_SRC


*** org
 #+BEGIN_SRC emacs-lisp
 (use-package org
	:config
	(require 'ob-ipython)
	(require 'ob-go)
	(auto-image-file-mode 1)
	(defun insert-current-time () 
      "Insert the current time" 
      (interactive "*") 
      (insert (current-time-string)))
	(global-set-key (kbd "C-c i") 'insert-current-time)
	(require 'org-download)
	(setq org-startup-with-inline-images t)
	;; (org-display-inline-image)
	(define-key org-mode-map   (kbd "C-,") 'crux-switch-to-previous-buffer)
	;; (setq python-shell-interpreter "python")
	(org-babel-do-load-languages
   'org-babel-load-languages
   '((emacs-lisp . t)
	 ;; (julia . t)
	 (go . t)
	 (python . t)
	 (ipython . t)
	 ;; (jupyter . t)))
	 ))

	(setq org-confirm-babel-evaluate nil)   ;don't prompt me to confirm everytime I want to evaluate a block

  ;;; display/update images in the buffer after I evaluate
  (add-hook 'org-babel-after-execute-hook 'org-display-inline-images 'append)
	)
 #+END_SRC
 

                  
** language config
*** common functions
#+BEGIN_SRC emacs-lisp
(defun get-file-dir-or-home ()
  "If inside a file buffer, return the directory, else return home"
  (interactive)
  (let ((filename (buffer-file-name)))
    (if (not (and filename (file-exists-p filename)))
	"~/"
    (file-name-directory filename))))

(defun iterm-goto-filedir-or-home ()
  "Go to present working dir and focus iterm"
  (interactive)
  (do-applescript
   (concat
    " tell application \"iTerm2\"\n"
    "   tell the current session of current window\n"
    (format "     write text \"cd %s\" \n" (get-file-dir-or-home))
    "   end tell\n"
    " end tell\n"
    " do shell script \"open -a iTerm\"\n"
    ))
  )

(defun cf-run-lang (command &optional hook)
  (progn
	(save-buffer)
	(iterm-goto-filedir-or-home)
	(do-applescript 
	 (concat
	  " tell application \"iTerm2\"\n"
	  "   tell the current session of current window\n"
	  (format "   write text \"%s %s\" \n" command (file-name-nondirectory (buffer-file-name)))
	  "   end tell\n"
	  " end tell\n"
	  " do shell script \"open -a iTerm\"\n"
      ))))


(defun cf-run-command (command &optional hook)
  (progn
	(save-buffer)
	(iterm-goto-filedir-or-home)
	(do-applescript 
	 (concat
	  " tell application \"iTerm2\"\n"
	  "   tell the current session of current window\n"
	  (format "   write text \"%s \" \n" command)
	  "   end tell\n"
	  " end tell\n"
	  " do shell script \"open -a iTerm\"\n"
      ))))

#+END_SRC
*** web 
#+BEGIN_SRC emacs-lisp


(use-package web-mode
  :config
  
  (add-to-list 'auto-mode-alist '("\\.php\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.html\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.tpl\\.php\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.[agj]sp\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.as[cp]x\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.erb\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.mustache\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.djhtml\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.wxml\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.wxss\\'" . css-mode))
  (require 'osx-browse)
  (osx-browse-mode 1)
  (define-key web-mode-map (kbd "H-r") 'run-js)
  (require 'zencoding-mode)
  (add-hook 'sgml-mode-hook 'zencoding-mode)
  (define-key web-mode-map (kbd "C-i") 'zencoding-expand-yas)
  (define-key web-mode-map (kbd "C-c C-s") 'yas-expand)
  (require 'css-mode)
  (use-package company-web
  :config
  (require 'company-web-html)
  (require 'company-web-jade))
 
)
#+END_SRC

*** js
#+BEGIN_SRC emacs-lisp

(use-package js2-mode
  :config
  (defun cf-run-nodejs ()
	(interactive)
	(cf-run-lang "node"))
  (define-key js2-mode-map (kbd "h-R") 'cf-run-nodejs)
  (defun run-in-browser ()
	(interactive)
	(progn
	  (save-buffer)
	  (xah-open-in-external-app)))
  (define-key js2-mode-map (kbd "H-r") 'run-in-browser)
  (add-to-list 'auto-mode-alist '("\\.js\\'" . js2-mode))
  (setq js2-strict-missing-semi-warning nil)
  )

#+END_SRC  
*** c/c++
#+BEGIN_SRC emacs-lisp
(use-package cc-mode
  :config
  (defun cf-run-cpp ()
	(interactive)
	(cf-run-lang "c++ -Wno-c++11-extensions -g -std=c++11 "))
  (defun cf-debug-cpp ()
	(interactive)
	(cf-run-command "lldb ./a.out"))
  (define-key c++-mode-map (kbd "H-r") 'cf-run-cpp)
  (define-key c++-mode-map (kbd "C-<f5>") 'cf-run-cpp)
  )
#+END_SRC

*** java 
#+BEGIN_SRC emacs-lisp



(defun cf-run-java ()
  (interactive)
  (progn (save-buffer)
		 (iterm-goto-filedir-or-home)
		 (do-applescript
		  (concat
		   " tell application \"iTerm2\"\n"
		   "   tell the current session of current window\n"
		   
		   (format "    write text \"%s \"\n"
				   (concat "javac -g " (file-name-nondirectory (buffer-file-name))))
		   (format "   write text \"java -ea %s\" \n"
				   (substring (file-name-nondirectory (buffer-file-name))
							  0
							  (- (length (file-name-nondirectory (buffer-file-name))) 5)))
		   "   end tell\n"
		   " end tell\n"
		   " do shell script \"open -a iTerm\"\n"
		   ))
		 ))




(defun cf-run-java-package ()
  (interactive)
  (progn
	(save-buffer)
	(iterm-goto-filedir-or-home)
	(do-applescript 
	 (concat
	  " tell application \"iTerm2\"\n"
	  "   tell the current session of current window\n"

	  (format "     write text \"cd %s\" \n" (get-file-dir-or-home))
	  (format "   write text \"javac -d . -g *.java\" \n" )
	  (format "   write text \"java login.%s\" \n" 	(substring (file-name-nondirectory (buffer-file-name))
  					   0
  					   (- (length (file-name-nondirectory (buffer-file-name))) 5)))
	  "   end tell\n"
	  " end tell\n"
	  " do shell script \"open -a iTerm\"\n"
      ))))

#+END_SRC

*** python
#+BEGIN_SRC emacs-lisp


 (use-package elpy
   :config
   (elpy-enable)
   (setq-default tab-width 4)
   (setq-default python-indent 4)
   (setq indent-tabs-mode nil)
   (define-key python-mode-map (kbd "H-;") 'elpy-autopep8-fix-code)
   (define-key python-mode-map (kbd "C-o") 'elpy-open-and-indent-line-below)
   (define-key python-mode-map (kbd "C-S-o") 'elpy-open-and-indent-line-above)
   (define-key python-mode-map (kbd "M-<return>") 'ipython-shell-send-region)
   
   (define-key python-mode-map (kbd "H-<return>") 'ipython-shell-send-defun)
   (defun cf-run-python ()
	 (interactive)
	 (cf-run-lang "ipython3"))
  (define-key python-mode-map (kbd "H-r") 'cf-run-python)
  (define-key python-mode-map (kbd "H-d") 'debug-python)
 
 (setq elpy-rpc-python-command "python3")

 (setenv "PYTHONPATH" (shell-command-to-string "$SHELL --login -c 'echo -n $PYTHONPATH'"))
 (set-variable 'python-indent-offset 4)
 (setq python-shell-interpreter "ipython")
)
#+END_SRC
*** go 
#+BEGIN_SRC emacs-lisp
(use-package go-mode
  :config
  (defun cf-run-go ()
	(interactive)
	(cf-run-lang "go run "))
  (define-key go-mode-map (kbd "H-r") 'cf-run-go)
  )
#+END_SRC
>>>>>>> master
